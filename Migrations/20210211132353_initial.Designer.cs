// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using routing;

namespace routing.Migrations
{
    [DbContext(typeof(DbConetxt))]
    [Migration("20210211132353_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("routing.Funcionalidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Funcionalidades");
                });

            modelBuilder.Entity("routing.Rota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Componente")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Rotas");
                });

            modelBuilder.Entity("routing.RotaFuncionalidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdFuncionalidade")
                        .HasColumnType("int");

                    b.Property<int>("IdRota")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdFuncionalidade");

                    b.HasIndex("IdRota");

                    b.ToTable("RotasFuncionalidades");
                });

            modelBuilder.Entity("routing.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("routing.UsuarioRotaFuncionalidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdRotaFuncionalidade")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdRotaFuncionalidade");

                    b.HasIndex("IdUsuario");

                    b.ToTable("UsuariosRotasFuncionalidades");
                });

            modelBuilder.Entity("routing.RotaFuncionalidade", b =>
                {
                    b.HasOne("routing.Funcionalidade", "Funcionalidade")
                        .WithMany("RotasFuncionalidades")
                        .HasForeignKey("IdFuncionalidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("routing.Rota", "Rota")
                        .WithMany("RotasFuncionalidades")
                        .HasForeignKey("IdRota")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("routing.UsuarioRotaFuncionalidade", b =>
                {
                    b.HasOne("routing.RotaFuncionalidade", "RotaFuncionalidade")
                        .WithMany("UsuariosRotasFuncionalidades")
                        .HasForeignKey("IdRotaFuncionalidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("routing.Usuario", "Usuario")
                        .WithMany("UsuarioRotaFuncionalidades")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
